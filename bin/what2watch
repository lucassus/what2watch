#!/usr/bin/env node

var _ = require('lodash');
var Promise = require('bluebird');

var ProgressBar = require('progress');

var program = require('../lib/program');

if (!program.directory) {
  console.error('Directory is required!');
  program.help();

  process.exit(1);
}

var OpenSubtitles = require('../lib/open_subtitles');
var api = new OpenSubtitles();

var findMovies = require('../lib/find_movies');
var fetchFileStat = require('../lib/fetch_file_stat');
var fetchMovieInfo = require('../lib/fetch_movie_info');
var fetchMovieDetails = require('../lib/fetch_movie_details');
var printMovie = require('../lib/print_movie');

var buildProgressBar = function(format, total) {
  var bar = new ProgressBar(format, { total: total });
  return {
    tick: function() { bar.tick(); }
  };
};

process.on('unhandledRejection', function(reason) {
  console.error('Unhandled rejection:', reason);
});

function queryMovie(path, tick) {
  return fetchFileStat(path).then(function(file) {
    return Promise.all([
      file,
      fetchMovieInfo(api, file).catch(function() {
        return {};
      })
    ]);
  }).spread(function(file, info) {
    return Promise.all([
      file,
      info,
      fetchMovieDetails(api, info).catch(function() {
        return {};
      })
    ]);
  }).spread(function(file, info, movie) {
    return _.extend({}, { file: file }, { movie: _.extend({}, info, movie) });
  }).finally(tick);
}

Promise.resolve(program.directory).then(function(directory) {
  return findMovies(program.formats, directory);
}).then(function(paths) {
  console.log('Found', paths.length, 'movies');

  var bar = buildProgressBar('Working [:bar] :percent :etas', paths.length);

  return Promise.map(paths, function(path) {
    return queryMovie(path, bar.tick);
  }, { concurrency: 8 });
}).then(function(stats) {
  // TODO display unprocessed movies
  return _.chain(stats)
    .filter(function(stat) {
      return Boolean(_.get(stat, 'movie.imdbId'));
    })
    .filter(function(stat) {
      return _.get(stat, 'movie.kind') !== 'episode';
    })
    .sortBy(function(stat) {
      return parseFloat(_.get(stat, 'movie.rating', -Infinity));
    })
    .reverse()
    .value();
}).then(function(stats) {
  _.each(stats, function(stat) {
    console.log('\n---------------------\n');
    console.log(printMovie(stat));
  });
}).catch(function(error) {
  console.log('Error:', error);
  process.exit(1);
});
