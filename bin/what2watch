#!/usr/bin/env node

var _ = require('lodash');
var Promise = require('bluebird');

var ProgressBar = require('progress');

var program = require('../lib/program');

if (!program.directory) {
  console.error('Directory is required!');
  program.help();

  process.exit(1);
}

var OpenSubtitles = require('../lib/open_subtitles');
var api = new OpenSubtitles();

var findMovies = require('../lib/find_movies');
var collectFileStats = require('../lib/collect_file_stats');
var collectInfo = require('../lib/collect_info');
var collectDetails = require('../lib/collect_details');
var printMovie = require('../lib/print_movie');

var buildProgressBar = function(format, total) {
  var bar = new ProgressBar(format, { total: total });
  return {
    tick: function() { bar.tick(); }
  };
};

process.on('unhandledRejection', function(reason) {
  console.error('Unhandled rejection:', reason);
});

Promise.resolve(program.directory).then(function(directory) {
  return findMovies(program.formats, directory);
}).then(function(paths) {
  console.log('Found', paths.length, 'movies');
  var bar = buildProgressBar('Loading files    [:bar] :percent :etas', paths.length);
  return collectFileStats(paths, bar.tick);
}).then(function(stats) {
  var bar = buildProgressBar('Fining movies    [:bar] :percent :etas', stats.length);
  return collectInfo(api, stats, bar.tick);
}).then(function(stats) {
  var bar = buildProgressBar('Fetching details [:bar] :percent :etas', stats.length);
  return collectDetails(api, stats, bar.tick);
}).then(function(stats) {
  // filter, sort etc.
  return _.chain(stats)
    .filter(function(stat) { return _.get(stat, 'movie.kind') !== 'episode'; })
    .sortBy(function(stat) { return parseFloat(_.get(stat, 'movie.rating', -Infinity)); })
    .reverse()
    .value();
}).then(function(stats) {
  _.each(stats, function(stat) {
    console.log('\n---------------------\n');
    console.log(printMovie(stat));
  });
}).catch(function(error) {
  console.log('Error:', error);
  process.exit(1);
});
